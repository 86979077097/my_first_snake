#include <iostream>
#include <SDL2/SDL.h>
#include <deque>
#include <cstdlib>
#include <time.h>

using namespace std;

deque <int> d1;
deque <int> d2;

deque<int>::iterator it1;
deque<int>::iterator it2;

deque<int>::iterator ip1;
deque<int>::iterator ip2;


int ok1, ok2, delay = 70, mx = 10, my = 5, points = 0;

int width = 300, height = 450, resolution = 15;

int verif(deque<int> g1, deque<int> g2, int x, int y)
{
    int ok = 1;
    for(it1 = g1.begin(), it2 = g2.begin(); it1 != g1.end(); it1++, it2++)
    {
        if(*it1 == x && *it2 == y){ok = 0;}
    }
    return ok;
}

void afisare_coada(deque <int> g)
{
    deque<int>::iterator i;
    for(i = g.begin(); i != g.end(); i++)
    {
        cout<<*i<<" ";
    }
}

int main(int argv, char *argc[])
{

    cout<<"points  ";
    cout<<points;
    srand(time(0));
    int x = 0, y = 20, dx = 6, dy = 1;
    SDL_Window *window;
    SDL_Renderer *renderer;
    SDL_Init(SDL_INIT_EVERYTHING);
    SDL_CreateWindowAndRenderer(width, height, 0, &window, &renderer);
    SDL_RenderSetScale(renderer,resolution,resolution);


    SDL_Rect a1 = {10,5,1,1};
    SDL_SetRenderDrawColor(renderer,255,0,0,255);
    SDL_RenderFillRect(renderer,&a1);
    SDL_RenderPresent(renderer);

    SDL_Rect r = {x,y,dx,dy};
    SDL_SetRenderDrawColor(renderer,0,255,255,255);
    SDL_RenderFillRect(renderer,&r);

    SDL_Rect h;

    SDL_RenderPresent(renderer);

    int a = 1, i, j;

    for(i = x; i < x+dx; i++)
    {
        d1.push_back(i);
        d2.push_back(y);
    }

    char directie = 'r', directiep = 'r';
    SDL_Event event;
    while(a)
    {
        if(SDL_PollEvent(&event))
        {
            if(SDL_QUIT == event.type)
            {
                a = 0;
            }
            if(SDL_KEYDOWN == event.type)
            {
                if(SDLK_RIGHT == event.key.keysym.sym)
                {
                    directie = 'r';
                }
                if(SDLK_LEFT == event.key.keysym.sym)
                {
                    directie = 'l';
                }
                if(SDLK_UP == event.key.keysym.sym)
                {
                    directie = 'u';
                }
                if(SDLK_DOWN == event.key.keysym.sym)
                {
                    directie = 'd';
                }
            }

        }
        //cout<<*d1.begin()<<" "<<*d2.begin()<<endl;
        if(directie == 'd')//1 2 3 4 5
        {
            if(directiep != 'u')
            {
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1);
                d2.push_back(*it2+1);

                i = *it1;
                j = *it2 + 1;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                directiep = 'd';
                SDL_Delay(delay);
            }
            else
            {
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1);
                d2.push_back(*it2-1);

                i = *it1;
                j = *it2 - 1;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                directiep = 'u';
                SDL_Delay(delay);
            }
        }
        if(directie == 'u')
        {
            if(directiep != 'd')
            {
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1);
                d2.push_back(*it2-1);

                i = *it1;
                j = *it2 - 1;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                directiep = 'u';
                SDL_Delay(delay);
            }
            else
            {
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1);
                d2.push_back(*it2+1);

                i = *it1;
                j = *it2 + 1;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                directiep = 'd';
                SDL_Delay(delay);
            }
        }
        if(directie == 'r')
        {
            if(directiep != 'l')
            {
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1+1);
                d2.push_back(*it2);

                i = *it1+1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                SDL_Delay(delay);
                directiep = 'r';
            }
            else
            {
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1-1);
                d2.push_back(*it2);

                i = *it1-1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                SDL_Delay(delay);
                directiep = 'l';
            }
        }
        if(directie == 'l')
        {
            if(directiep != 'r')
            {
                //imaginiBMP(window);
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1-1);
                d2.push_back(*it2);

                i = *it1-1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                SDL_Delay(delay);
                directiep = 'l';
            }
            else
            {
                it1 = d1.begin();
                it2 = d2.begin();
                i = *it1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,0,0,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);

                d1.pop_front();
                d2.pop_front();
                it1 = it1 + dx-1;
                it2 = it2 + dx-1;
                d1.push_back(*it1+1);
                d2.push_back(*it2);

                i = *it1+1;
                j = *it2;
                h = {i,j,1,1};
                SDL_SetRenderDrawColor(renderer,0,255,255,255);
                SDL_RenderFillRect(renderer,&h);
                SDL_RenderPresent(renderer);
                SDL_Delay(delay);
                directiep = 'r';

            }
        }
        //SDL_Delay(40);
        ok1 = 0;
        it1 = d1.begin() + dx - 1;
        it2 = d2.begin() + dx - 1;
        for(ip1 = d1.begin(), ip2 = d2.begin(); ip1 != d1.end(); ++ip1, ++ip2)
        {
            if(*ip1 == *it1 && *ip2 == *it2)
            {
                ok1++;
            }
        }
        if(ok1 == 2)
        {
            a = 0;
            cout<<" ai pierdut";
        }

        //vedem daca capul atinge orice alta bucata din corp, astfel e doar un "for"
        //Gedeon Bácsi
        //8 9 10 11 12 13
        //
        cout<<(d1.end() - 1)<<" "<<(d2.end() - 1)<<endl;
        it1 = d1.begin() + dx - 1;
        it2 = d2.begin() + dx - 1;

        if(*it1 == mx && *it2 == my)
        {
            ok2 = 1;
            it1 = d1.begin();
            it2 = d2.begin();
            ip1 = it1 + 1;
            ip2 = it2 + 1;
            if(*it2 == *ip2)
            {
                if(*it1 < *ip1)
                {
                    d1.push_front(*it1-1);
                    d2.push_front(*it2);
                    h = {*it1-1,*it2,1,1};
                    dx++;
                    SDL_SetRenderDrawColor(renderer,255,0,0,255);
                    SDL_RenderFillRect(renderer,&h);
                    SDL_RenderPresent(renderer);
                }

                if(*it1 > *ip1)
                {
                    d1.push_front(*it1+1);
                    d2.push_front(*it2);
                    h = {*it1+1,*it2,1,1};
                    dx++;
                    SDL_SetRenderDrawColor(renderer,255,255,255,255);
                    SDL_RenderFillRect(renderer,&h);
                    SDL_RenderPresent(renderer);
                }

            }

            if(*it1 == *ip1)
            {
                if(*it2 < *ip2)
                {
                    d1.push_front(*it1);
                    d2.push_front(*it2-1);
                    h = {*it1,*it2-1,1,1};
                    dx++;
                    SDL_SetRenderDrawColor(renderer,0,255,255,255);
                    SDL_RenderFillRect(renderer,&h);
                    SDL_RenderPresent(renderer);
                }

                if(*it2 > *ip2)
                {
                    d1.push_front(*it1);
                    d2.push_front(*it2+1);
                    h = {*it1,*it2+1,1,1};
                    dx++;
                    SDL_SetRenderDrawColor(renderer,0,255,255,255);
                    SDL_RenderFillRect(renderer,&h);
                    SDL_RenderPresent(renderer);
                }


            }//

            mx = rand() % (width / resolution);
            my = rand() % (height / resolution);
            while(verif(d1,d2,mx,my) == 0)
            {
                mx = rand() % (width / resolution);
                my = rand() % (height / resolution);
            }
            a1 = {mx,my,1,1};
            SDL_SetRenderDrawColor(renderer,255,0,0,255);
            SDL_RenderFillRect(renderer,&a1);
            SDL_RenderPresent(renderer);
            points++;
            /*if(points < 10)cout<<"\b";
            if(points >= 10 && points < 100){cout<<"\b\b";}
            if(points >= 100 && points < 999){cout<<"\b\b\b";}
            cout<<points;*/
        }
        it1 = d1.begin() + dx - 1;
        it2 = d2.begin() + dx - 1;
        if(*it1 > 20 || *it1 < 0 || *it2 > 30 || *it2 < 0){a = 0; cout<<" ai pierdut";break;}
        if(dx == 600){cout<<" castigator";a = 0;}

    }

    return 0;
}